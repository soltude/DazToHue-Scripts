// DAZ Studio version 4.22.0.16 filetype DAZ Script

// DthUtils.dsa must exist in the same folder as this script
var dir_self = new DzDir (new DzFileInfo (getScriptFileName ()).path ());
include (dir_self.filePath ("DthUtils.dsa"));
DTH_VERBOSE = false;
var oNode = Scene.getPrimarySelection();

function getProps(oNode)
{
	oNode.getPropertyList().forEach( function(oProp){
		if (oProp.hasKeys()) {	
			print(oProp.objectName, oProp.getValue());
			for( var j = 1; j < oProp.getNumKeys(); j++) {			
				print(oProp.objectName, j, oProp.getKeyTime(j).valueOf()/Scene.getTimeStep() );
			}
		}	
	});	
}

var timeStep = Scene.getTimeStep().valueOf();

/** sPropName - optional, used with morphs where the oProp doesn't have the correct name
 * 
 * */



function addKeysFromProp(frameDatas, oNode, oProp, sPropName){
	var j;
	var timeStep = Scene.getTimeStep().valueOf();
	// Don't get keys that only exist on the first frame 
	if (oProp && oProp.inherits("DzFloatProperty") && oProp.getNumKeys() > 1) 
	{	
		var origValue = oProp.getRawValue(0);
		if(oProp.isAlias()){
			print ("property is alias, returning false.");
			return false;
		}
		var keyTimes = [];
		var numKeys = oProp.getNumKeys();j
		// For each key on this oProp
		for(j = 0; j < numKeys; j++) 
		{
			var keyTime = oProp.getKeyTime(j).valueOf();
			var propValue = oProp.getRawValue(keyTime);
			if (!approx_eq(propValue, oProp.getValue(keyTime)))
				print("><- prop value diff from raw value", oProp.name, "key:", j, "frame:", keyTime/timeStep);
			// only record a key if its value is different from the reference pose.
			if( !approx_eq(propValue, origValue) )
			{
				var frameIdx = keyTime / timeStep;
				var keyData = { frameIdx:  frameIdx,
								nodeName:  oNode.objectName,
								propName:  sPropName || oProp.name, // propPath:   getAncestors(childNode),
								propValue: propValue };
				keyTimes.push(frameIdx);
				// verbose("  Adding framedata", keyData.propName, "at frame", frameIdx);
				addFrameData(frameDatas, keyData);

				//handle additive morphs: we lerp the value at each intermediate frame and put a key there
				var nextTime = oProp.getKeyTime(j+1).valueOf(); 
				var nextValue = oProp.getRawValue(nextTime);
				var timeDiff = (nextTime-keyTime);
				if( j > 0 && j < numKeys -1				// - not the first or last key 
					&& !approx_eq(nextValue, origValue) // - next key is not original value
					&& nextTime - keyTime > timeStep 	// - more than one frame between keys
					&& timeDiff/timeStep < 20)			// - avoid noise
				{
					for(var t = keyTime + timeStep; t < nextTime; t += timeStep ){
						frameIdx = t / timeStep;
						keyData = { frameIdx:  frameIdx,
									nodeName:  oNode.objectName,
									propName:  sPropName || oProp.name, // propPath:   getAncestors(childNode),
									propValue: ((propValue * (t - keyTime) / timeDiff)
											   + (nextValue * (nextTime - t) / timeDiff))};
						print(" * adding lerp key at frame", t/timeStep,":", keyData.propName, keyData.propValue);
						addFrameData(frameDatas, keyData);
					}
				
				}
			}
			else{
				print("propValue ~= origValue", sPropName || oProp.name, origValue, propValue);
			}
		}
		print(childNode.objectName, oProp.getLabel(), keyTimes);
	}
	else{
		// print("WARNING: oProp is not a DzFloatProperty or has only one key:", oProp.getLabel());
	}
	//print("Property",oProp.objectName,"has one or fewer keys, not including");
}


function addKeysFromPropFigure(frameDatas, oNode, oProp, sPropName){
	var j;
	if (oProp && oProp.inherits("DzFloatProperty") ) 
	{	
		if(oProp.isAlias()){
			//ve ("property is alias, returning false.");
			return false;
		}
		if(!oProp.currentValueIsDefaultValue()){
			print(oProp.name, oProp.currentValueIsDefaultValue());
			var	keyData = { frameIdx:  0,
							nodeName:  oNode.objectName,
							propName:  sPropName || oProp.name, // propPath:   getAncestors(childNode),
							propValue: oProp.getValue(0)};
			print("  Adding framedata", keyData.propName, "at frame", 0);
			addFrameData(frameDatas, keyData);
		}
	}
	else{
		// print("WARNING: oProp is not a DzFloatProperty or has only one key:", oProp.getLabel());
	}
	//print("Property",oProp.objectName,"has one or fewer keys, not including");
}




function scanNodesForFrameDatas(aNodes, frameDatas, fPropFunc){
	fPropFunc = fPropFunc || addKeysFromProp;
	var frameDatas = frameDatas || [];
	if(aNodes.length > 0){
		var oNodeRoot = getNodeRoot(aNodes[0]);
		if(oNodeRoot && oNodeRoot.inherits("DzNode"))
		{
			scanNodeForProps(oNodeRoot, frameDatas, fPropFunc);
		}
	}
	for (var i = 0; i < aNodes.length; i++)
	{
		var oNode = aNodes[i];
		if(oNode){
			verbose("scanning node", oNode.name, "for properties and morphs");
			scanNodeForMorphs(oNode, frameDatas, fPropFunc);
		}
	}
	return frameDatas;
}

function scanNodeForProps(oNode, frameDatas, fPropFunc){
	var frameDatas = frameDatas || [];
	if(oNode && oNode.inherits("DzNode"))
	{	
		var children = oNode.getNodeChildren(true);
		children.push(oNode); // to get oNode's own properties
		var i, j;
		var timeStep = Scene.getTimeStep().valueOf();

		// Check all normal properties
		for (i = 0; i < children.length; i++){
			childNode = children[i];		
			if(childNode) // && childNode.inherits("DzNode")){
			{
				//print(i, childNode.objectName, getNodeParents(childNode));
				childNode.getPropertyList().forEach( function(oProp)
				{
					// verbose("  Adding key from prop:", oProp.name);
					fPropFunc(frameDatas, childNode, oProp);
				});
			}
		}
	}
	else
	{
		print("ERROR: oNode ", oNode.name, "not found or not a DzNode");
	}
	return frameDatas;
}

function scanNodeForMorphs(oNode, frameDatas, fPropFunc){
	var frameDatas = frameDatas || [];
	if(oNode && oNode.inherits("DzNode"))
	{	
		// Check all morphs
		var oObj = oNode.getObject();
		if(oObj){
			for(var i=0; i<oObj.getNumModifiers(); i++)
			{
				oMod = oObj.getModifier(i);
				if(oMod && oMod.inherits("DzMorph"))
				{
					oProp = oMod.getValueControl();
					if(oProp && oProp.getNumKeys() > 1)
					{
						verbose("modifier:", oMod.name, oMod.inherits("DzMorph"));
						fPropFunc(frameDatas, oNode, oProp, oMod.name);
					}
				}
				
				
			}
		}	
	}
	else
	{
		print("ERROR: oNode ", oNode.name, "not found or not a DzNode");
	}
	return frameDatas;
}

function getAncestors(oNode){
	var nextParent = oNode.getNodeParent();
	var ancestors = [];
	while(nextParent)
	{
		ancestors.push(nextParent.objectName);
		nextParent = nextParent.getNodeParent();
	}
	return ancestors;
}


function getNodeParents(oNode){
	parents = [];
	if(oNode && oNode.inherits("DzNode"))
	{
		parent = oNode.getNodeParent();
		while (parent){
			parents.push(parent.objectName);
			parent = parent.getNodeParent();	
		}
	}
	return parents;
}


// function printFrameDatas(frameDatas){
// 	for (i = 1; i < frameDatas.length; i++){
// 		var frameData = frameDatas[i];
// 		if(frameData !== undefined){	
// 			print("Frame", i, "length:", frameData.length);	
// 			if (frameData.length > 30) //A regular frame shouldn't have anywhere near this
// 				continue;
// 			for (j = 0; j < frameData.length; j++)
// 			{
// 				var keyData = frameData[j];
// 				if(keyData.propValue != 0)
// 					print("  ", keyData.nodeName, keyData.propName, keyData.propValue);
// 			}
// 		}
// 	}
// }
